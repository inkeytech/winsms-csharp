/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreditTransferDetails
    /// </summary>
    [DataContract]
    public partial class CreditTransferDetails :  IEquatable<CreditTransferDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditTransferDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreditTransferDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditTransferDetails" /> class.
        /// </summary>
        /// <param name="sendingAccountNumber">The WinSMS account number of the account from which credits will be deducted. (required).</param>
        /// <param name="receivingAccountNumber">The WinSMS account number of the account to which credits will be added. (required).</param>
        /// <param name="transferQuantity">The number of credits to transfer from the sending account to the receiving account. (required).</param>
        public CreditTransferDetails(int? sendingAccountNumber = default(int?), int? receivingAccountNumber = default(int?), int? transferQuantity = default(int?))
        {
            // to ensure "sendingAccountNumber" is required (not null)
            if (sendingAccountNumber == null)
            {
                throw new InvalidDataException("sendingAccountNumber is a required property for CreditTransferDetails and cannot be null");
            }
            else
            {
                this.SendingAccountNumber = sendingAccountNumber;
            }
            // to ensure "receivingAccountNumber" is required (not null)
            if (receivingAccountNumber == null)
            {
                throw new InvalidDataException("receivingAccountNumber is a required property for CreditTransferDetails and cannot be null");
            }
            else
            {
                this.ReceivingAccountNumber = receivingAccountNumber;
            }
            // to ensure "transferQuantity" is required (not null)
            if (transferQuantity == null)
            {
                throw new InvalidDataException("transferQuantity is a required property for CreditTransferDetails and cannot be null");
            }
            else
            {
                this.TransferQuantity = transferQuantity;
            }
        }
        
        /// <summary>
        /// The WinSMS account number of the account from which credits will be deducted.
        /// </summary>
        /// <value>The WinSMS account number of the account from which credits will be deducted.</value>
        [DataMember(Name="sendingAccountNumber", EmitDefaultValue=false)]
        public int? SendingAccountNumber { get; set; }

        /// <summary>
        /// The WinSMS account number of the account to which credits will be added.
        /// </summary>
        /// <value>The WinSMS account number of the account to which credits will be added.</value>
        [DataMember(Name="receivingAccountNumber", EmitDefaultValue=false)]
        public int? ReceivingAccountNumber { get; set; }

        /// <summary>
        /// The number of credits to transfer from the sending account to the receiving account.
        /// </summary>
        /// <value>The number of credits to transfer from the sending account to the receiving account.</value>
        [DataMember(Name="transferQuantity", EmitDefaultValue=false)]
        public int? TransferQuantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditTransferDetails {\n");
            sb.Append("  SendingAccountNumber: ").Append(SendingAccountNumber).Append("\n");
            sb.Append("  ReceivingAccountNumber: ").Append(ReceivingAccountNumber).Append("\n");
            sb.Append("  TransferQuantity: ").Append(TransferQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditTransferDetails);
        }

        /// <summary>
        /// Returns true if CreditTransferDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditTransferDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditTransferDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SendingAccountNumber == input.SendingAccountNumber ||
                    (this.SendingAccountNumber != null &&
                    this.SendingAccountNumber.Equals(input.SendingAccountNumber))
                ) && 
                (
                    this.ReceivingAccountNumber == input.ReceivingAccountNumber ||
                    (this.ReceivingAccountNumber != null &&
                    this.ReceivingAccountNumber.Equals(input.ReceivingAccountNumber))
                ) && 
                (
                    this.TransferQuantity == input.TransferQuantity ||
                    (this.TransferQuantity != null &&
                    this.TransferQuantity.Equals(input.TransferQuantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SendingAccountNumber != null)
                    hashCode = hashCode * 59 + this.SendingAccountNumber.GetHashCode();
                if (this.ReceivingAccountNumber != null)
                    hashCode = hashCode * 59 + this.ReceivingAccountNumber.GetHashCode();
                if (this.TransferQuantity != null)
                    hashCode = hashCode * 59 + this.TransferQuantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
