/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MessageRecipientResponse
    /// </summary>
    [DataContract]
    public partial class MessageRecipientResponse :  IEquatable<MessageRecipientResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageRecipientResponse" /> class.
        /// </summary>
        /// <param name="clientMessageId">If the optional ***clientMessageId*** value was specified in the recipient object for the recipient, it will be returned here. If not, ***clientMessageId*** will be **null**. .</param>
        /// <param name="mobileNumber">The mobile number specified as the ***mobileNumber*** value of the recipient object of the request. .</param>
        /// <param name="accepted">A boolean value indicating whether the API accepted the recipient for SMS delivery. This will be **false** If you have insufficient credits or the recipient mobile number supplied is not valid. .</param>
        /// <param name="acceptError">If the ***accepted*** value is **false**, this will contain the reason that delivery to the recipient was declined by the API. If the recipient was accepted, this value will be blank. .</param>
        /// <param name="apiMessageId">The WinSMS Message Id assigned to the specific message recipient. This Id can be used to obtain the status of the message, and to delete the message if it was scheduled. If the API did not accept the recipient for delivery, the value will be **null**. .</param>
        /// <param name="scheduledTime">The date and time that the message was scheduled for delivery to the recipient.  If no ***scheduledTime*** value was specified in the request, or the recipient was not accepted for delivery, this value will be **null**. .</param>
        /// <param name="creditCost">The number of credits deducted from your account for the SMS to this recipient.  The credit cost is based on the destination country of the recipient and the length (number of segments) of the message.  This credit cost will be reimbursed if the message is scheduled and subsequently deleted.  If the recipient is not accepted for delivery, the ***creditCost*** value will be **null**. .</param>
        /// <param name="newCreditBalance">The number of WinSMS credits remaining in your account after processing this recipient. .</param>
        public MessageRecipientResponse(string clientMessageId = default(string), string mobileNumber = default(string), bool? accepted = default(bool?), string acceptError = default(string), int? apiMessageId = default(int?), int? scheduledTime = default(int?), double? creditCost = default(double?), double? newCreditBalance = default(double?))
        {
            this.ClientMessageId = clientMessageId;
            this.MobileNumber = mobileNumber;
            this.Accepted = accepted;
            this.AcceptError = acceptError;
            this.ApiMessageId = apiMessageId;
            this.ScheduledTime = scheduledTime;
            this.CreditCost = creditCost;
            this.NewCreditBalance = newCreditBalance;
        }
        
        /// <summary>
        /// If the optional ***clientMessageId*** value was specified in the recipient object for the recipient, it will be returned here. If not, ***clientMessageId*** will be **null**. 
        /// </summary>
        /// <value>If the optional ***clientMessageId*** value was specified in the recipient object for the recipient, it will be returned here. If not, ***clientMessageId*** will be **null**. </value>
        [DataMember(Name="clientMessageId", EmitDefaultValue=false)]
        public string ClientMessageId { get; set; }

        /// <summary>
        /// The mobile number specified as the ***mobileNumber*** value of the recipient object of the request. 
        /// </summary>
        /// <value>The mobile number specified as the ***mobileNumber*** value of the recipient object of the request. </value>
        [DataMember(Name="mobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// A boolean value indicating whether the API accepted the recipient for SMS delivery. This will be **false** If you have insufficient credits or the recipient mobile number supplied is not valid. 
        /// </summary>
        /// <value>A boolean value indicating whether the API accepted the recipient for SMS delivery. This will be **false** If you have insufficient credits or the recipient mobile number supplied is not valid. </value>
        [DataMember(Name="accepted", EmitDefaultValue=false)]
        public bool? Accepted { get; set; }

        /// <summary>
        /// If the ***accepted*** value is **false**, this will contain the reason that delivery to the recipient was declined by the API. If the recipient was accepted, this value will be blank. 
        /// </summary>
        /// <value>If the ***accepted*** value is **false**, this will contain the reason that delivery to the recipient was declined by the API. If the recipient was accepted, this value will be blank. </value>
        [DataMember(Name="acceptError", EmitDefaultValue=false)]
        public string AcceptError { get; set; }

        /// <summary>
        /// The WinSMS Message Id assigned to the specific message recipient. This Id can be used to obtain the status of the message, and to delete the message if it was scheduled. If the API did not accept the recipient for delivery, the value will be **null**. 
        /// </summary>
        /// <value>The WinSMS Message Id assigned to the specific message recipient. This Id can be used to obtain the status of the message, and to delete the message if it was scheduled. If the API did not accept the recipient for delivery, the value will be **null**. </value>
        [DataMember(Name="apiMessageId", EmitDefaultValue=false)]
        public int? ApiMessageId { get; set; }

        /// <summary>
        /// The date and time that the message was scheduled for delivery to the recipient.  If no ***scheduledTime*** value was specified in the request, or the recipient was not accepted for delivery, this value will be **null**. 
        /// </summary>
        /// <value>The date and time that the message was scheduled for delivery to the recipient.  If no ***scheduledTime*** value was specified in the request, or the recipient was not accepted for delivery, this value will be **null**. </value>
        [DataMember(Name="scheduledTime", EmitDefaultValue=false)]
        public int? ScheduledTime { get; set; }

        /// <summary>
        /// The number of credits deducted from your account for the SMS to this recipient.  The credit cost is based on the destination country of the recipient and the length (number of segments) of the message.  This credit cost will be reimbursed if the message is scheduled and subsequently deleted.  If the recipient is not accepted for delivery, the ***creditCost*** value will be **null**. 
        /// </summary>
        /// <value>The number of credits deducted from your account for the SMS to this recipient.  The credit cost is based on the destination country of the recipient and the length (number of segments) of the message.  This credit cost will be reimbursed if the message is scheduled and subsequently deleted.  If the recipient is not accepted for delivery, the ***creditCost*** value will be **null**. </value>
        [DataMember(Name="creditCost", EmitDefaultValue=false)]
        public double? CreditCost { get; set; }

        /// <summary>
        /// The number of WinSMS credits remaining in your account after processing this recipient. 
        /// </summary>
        /// <value>The number of WinSMS credits remaining in your account after processing this recipient. </value>
        [DataMember(Name="newCreditBalance", EmitDefaultValue=false)]
        public double? NewCreditBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageRecipientResponse {\n");
            sb.Append("  ClientMessageId: ").Append(ClientMessageId).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  Accepted: ").Append(Accepted).Append("\n");
            sb.Append("  AcceptError: ").Append(AcceptError).Append("\n");
            sb.Append("  ApiMessageId: ").Append(ApiMessageId).Append("\n");
            sb.Append("  ScheduledTime: ").Append(ScheduledTime).Append("\n");
            sb.Append("  CreditCost: ").Append(CreditCost).Append("\n");
            sb.Append("  NewCreditBalance: ").Append(NewCreditBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageRecipientResponse);
        }

        /// <summary>
        /// Returns true if MessageRecipientResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageRecipientResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageRecipientResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientMessageId == input.ClientMessageId ||
                    (this.ClientMessageId != null &&
                    this.ClientMessageId.Equals(input.ClientMessageId))
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.Accepted == input.Accepted ||
                    (this.Accepted != null &&
                    this.Accepted.Equals(input.Accepted))
                ) && 
                (
                    this.AcceptError == input.AcceptError ||
                    (this.AcceptError != null &&
                    this.AcceptError.Equals(input.AcceptError))
                ) && 
                (
                    this.ApiMessageId == input.ApiMessageId ||
                    (this.ApiMessageId != null &&
                    this.ApiMessageId.Equals(input.ApiMessageId))
                ) && 
                (
                    this.ScheduledTime == input.ScheduledTime ||
                    (this.ScheduledTime != null &&
                    this.ScheduledTime.Equals(input.ScheduledTime))
                ) && 
                (
                    this.CreditCost == input.CreditCost ||
                    (this.CreditCost != null &&
                    this.CreditCost.Equals(input.CreditCost))
                ) && 
                (
                    this.NewCreditBalance == input.NewCreditBalance ||
                    (this.NewCreditBalance != null &&
                    this.NewCreditBalance.Equals(input.NewCreditBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientMessageId != null)
                    hashCode = hashCode * 59 + this.ClientMessageId.GetHashCode();
                if (this.MobileNumber != null)
                    hashCode = hashCode * 59 + this.MobileNumber.GetHashCode();
                if (this.Accepted != null)
                    hashCode = hashCode * 59 + this.Accepted.GetHashCode();
                if (this.AcceptError != null)
                    hashCode = hashCode * 59 + this.AcceptError.GetHashCode();
                if (this.ApiMessageId != null)
                    hashCode = hashCode * 59 + this.ApiMessageId.GetHashCode();
                if (this.ScheduledTime != null)
                    hashCode = hashCode * 59 + this.ScheduledTime.GetHashCode();
                if (this.CreditCost != null)
                    hashCode = hashCode * 59 + this.CreditCost.GetHashCode();
                if (this.NewCreditBalance != null)
                    hashCode = hashCode * 59 + this.NewCreditBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
