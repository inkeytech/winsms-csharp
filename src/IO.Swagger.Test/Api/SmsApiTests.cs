/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing SmsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SmsApiTests
    {
        private SmsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SmsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SmsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SmsApi
            //Assert.IsInstanceOfType(typeof(SmsApi), instance, "instance is a SmsApi");
        }

        
        /// <summary>
        /// Test DeleteScheduledMessages
        /// </summary>
        [Test]
        public void DeleteScheduledMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> messageDeleteRequest = null;
            //var response = instance.DeleteScheduledMessages(messageDeleteRequest);
            //Assert.IsInstanceOf<DeleteScheduledResponse> (response, "response is DeleteScheduledResponse");
        }
        
        /// <summary>
        /// Test GetIncomingMessages
        /// </summary>
        [Test]
        public void GetIncomingMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetIncomingMessages(offset, limit);
            //Assert.IsInstanceOf<IncomingMessageResponse> (response, "response is IncomingMessageResponse");
        }
        
        /// <summary>
        /// Test GetOptoutMessages
        /// </summary>
        [Test]
        public void GetOptoutMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOptoutMessages();
            //Assert.IsInstanceOf<OptoutMessageResponse> (response, "response is OptoutMessageResponse");
        }
        
        /// <summary>
        /// Test GetScheduledMessages
        /// </summary>
        [Test]
        public void GetScheduledMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetScheduledMessages(offset, limit);
            //Assert.IsInstanceOf<ScheduledMessageResponse> (response, "response is ScheduledMessageResponse");
        }
        
        /// <summary>
        /// Test SmsSend
        /// </summary>
        [Test]
        public void SmsSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewMessageDetails newMessageDetails = null;
            //var response = instance.SmsSend(newMessageDetails);
            //Assert.IsInstanceOf<NewMessageResponse> (response, "response is NewMessageResponse");
        }
        
        /// <summary>
        /// Test SmsStatus
        /// </summary>
        [Test]
        public void SmsStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> messageStatusRequest = null;
            //var response = instance.SmsStatus(messageStatusRequest);
            //Assert.IsInstanceOf<MessageStatusResponse> (response, "response is MessageStatusResponse");
        }
        
    }

}
