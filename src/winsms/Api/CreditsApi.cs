/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using winsms.Client;
using winsms.Model;

namespace winsms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICreditsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get your current WinSMS credit balance
        /// </summary>
        /// <remarks>
        /// Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CreditBalanceResponse</returns>
        CreditBalanceResponse GetCreditBalance ();

        /// <summary>
        /// Get your current WinSMS credit balance
        /// </summary>
        /// <remarks>
        /// Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CreditBalanceResponse</returns>
        ApiResponse<CreditBalanceResponse> GetCreditBalanceWithHttpInfo ();
        /// <summary>
        /// Transfer credits between main and sub accounts.
        /// </summary>
        /// <remarks>
        /// Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>CreditTransferResponse</returns>
        CreditTransferResponse TransferCredits (CreditTransferDetails creditTransferDetails);

        /// <summary>
        /// Transfer credits between main and sub accounts.
        /// </summary>
        /// <remarks>
        /// Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>ApiResponse of CreditTransferResponse</returns>
        ApiResponse<CreditTransferResponse> TransferCreditsWithHttpInfo (CreditTransferDetails creditTransferDetails);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get your current WinSMS credit balance
        /// </summary>
        /// <remarks>
        /// Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CreditBalanceResponse</returns>
        System.Threading.Tasks.Task<CreditBalanceResponse> GetCreditBalanceAsync ();

        /// <summary>
        /// Get your current WinSMS credit balance
        /// </summary>
        /// <remarks>
        /// Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CreditBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditBalanceResponse>> GetCreditBalanceAsyncWithHttpInfo ();
        /// <summary>
        /// Transfer credits between main and sub accounts.
        /// </summary>
        /// <remarks>
        /// Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>Task of CreditTransferResponse</returns>
        System.Threading.Tasks.Task<CreditTransferResponse> TransferCreditsAsync (CreditTransferDetails creditTransferDetails);

        /// <summary>
        /// Transfer credits between main and sub accounts.
        /// </summary>
        /// <remarks>
        /// Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>Task of ApiResponse (CreditTransferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreditTransferResponse>> TransferCreditsAsyncWithHttpInfo (CreditTransferDetails creditTransferDetails);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CreditsApi : ICreditsApi
    {
        private winsms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CreditsApi(String basePath)
        {
            this.Configuration = new winsms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = winsms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreditsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CreditsApi(winsms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = winsms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = winsms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public winsms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public winsms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get your current WinSMS credit balance Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CreditBalanceResponse</returns>
        public CreditBalanceResponse GetCreditBalance ()
        {
             ApiResponse<CreditBalanceResponse> localVarResponse = GetCreditBalanceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your current WinSMS credit balance Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CreditBalanceResponse</returns>
        public ApiResponse< CreditBalanceResponse > GetCreditBalanceWithHttpInfo ()
        {

            var localVarPath = "/credits/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCreditBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditBalanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreditBalanceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditBalanceResponse)));
        }

        /// <summary>
        /// Get your current WinSMS credit balance Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CreditBalanceResponse</returns>
        public async System.Threading.Tasks.Task<CreditBalanceResponse> GetCreditBalanceAsync ()
        {
             ApiResponse<CreditBalanceResponse> localVarResponse = await GetCreditBalanceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your current WinSMS credit balance Get the current remaining credit balance for the account.  ***Note*** - The credit balance is expressed as a value with a single decimal place. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CreditBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditBalanceResponse>> GetCreditBalanceAsyncWithHttpInfo ()
        {

            var localVarPath = "/credits/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCreditBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditBalanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreditBalanceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditBalanceResponse)));
        }

        /// <summary>
        /// Transfer credits between main and sub accounts. Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>CreditTransferResponse</returns>
        public CreditTransferResponse TransferCredits (CreditTransferDetails creditTransferDetails)
        {
             ApiResponse<CreditTransferResponse> localVarResponse = TransferCreditsWithHttpInfo(creditTransferDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer credits between main and sub accounts. Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>ApiResponse of CreditTransferResponse</returns>
        public ApiResponse< CreditTransferResponse > TransferCreditsWithHttpInfo (CreditTransferDetails creditTransferDetails)
        {
            // verify the required parameter 'creditTransferDetails' is set
            if (creditTransferDetails == null)
                throw new ApiException(400, "Missing required parameter 'creditTransferDetails' when calling CreditsApi->TransferCredits");

            var localVarPath = "/credits/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creditTransferDetails != null && creditTransferDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creditTransferDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creditTransferDetails; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreditTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditTransferResponse)));
        }

        /// <summary>
        /// Transfer credits between main and sub accounts. Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>Task of CreditTransferResponse</returns>
        public async System.Threading.Tasks.Task<CreditTransferResponse> TransferCreditsAsync (CreditTransferDetails creditTransferDetails)
        {
             ApiResponse<CreditTransferResponse> localVarResponse = await TransferCreditsAsyncWithHttpInfo(creditTransferDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer credits between main and sub accounts. Transfer credits between accounts. - From Main account to Sub account.  - From Sub account to Main account.  - From Sub account to another Sub account.  Your WinSMS account number and sub account number/s can be obtained by logging in to the WinSMS Client Zone (www.winsms.co.za/cz) with the main account&#39;s credentials.  The main account number is on the home tab and the sub account numbers are under the sub accounts tab.  Account numbers should be submitted as integers. Do not add the &#39;W&#39; prefix. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="creditTransferDetails">The details of the credit transfer. Sender account number, recipient account number, and number of credits to transfer.</param>
        /// <returns>Task of ApiResponse (CreditTransferResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreditTransferResponse>> TransferCreditsAsyncWithHttpInfo (CreditTransferDetails creditTransferDetails)
        {
            // verify the required parameter 'creditTransferDetails' is set
            if (creditTransferDetails == null)
                throw new ApiException(400, "Missing required parameter 'creditTransferDetails' when calling CreditsApi->TransferCredits");

            var localVarPath = "/credits/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (creditTransferDetails != null && creditTransferDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(creditTransferDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = creditTransferDetails; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransferCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreditTransferResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreditTransferResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreditTransferResponse)));
        }

    }
}
