/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using winsms.Client;
using winsms.Model;

namespace winsms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISmsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete scheduled SMS messages and refund credits
        /// </summary>
        /// <remarks>
        /// Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>DeleteScheduledResponse</returns>
        DeleteScheduledResponse DeleteScheduledMessages (List<int?> messageDeleteRequest);

        /// <summary>
        /// Delete scheduled SMS messages and refund credits
        /// </summary>
        /// <remarks>
        /// Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>ApiResponse of DeleteScheduledResponse</returns>
        ApiResponse<DeleteScheduledResponse> DeleteScheduledMessagesWithHttpInfo (List<int?> messageDeleteRequest);
        /// <summary>
        /// Get a list of incoming SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>IncomingMessageResponse</returns>
        IncomingMessageResponse GetIncomingMessages (int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of incoming SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>ApiResponse of IncomingMessageResponse</returns>
        ApiResponse<IncomingMessageResponse> GetIncomingMessagesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Get a list of incoming opt-out SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OptoutMessageResponse</returns>
        OptoutMessageResponse GetOptoutMessages ();

        /// <summary>
        /// Get a list of incoming opt-out SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OptoutMessageResponse</returns>
        ApiResponse<OptoutMessageResponse> GetOptoutMessagesWithHttpInfo ();
        /// <summary>
        /// Get a list of scheduled SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>ScheduledMessageResponse</returns>
        ScheduledMessageResponse GetScheduledMessages (int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of scheduled SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>ApiResponse of ScheduledMessageResponse</returns>
        ApiResponse<ScheduledMessageResponse> GetScheduledMessagesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Send SMS messages
        /// </summary>
        /// <remarks>
        /// Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>NewMessageResponse</returns>
        NewMessageResponse SmsSend (NewMessageDetails newMessageDetails);

        /// <summary>
        /// Send SMS messages
        /// </summary>
        /// <remarks>
        /// Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>ApiResponse of NewMessageResponse</returns>
        ApiResponse<NewMessageResponse> SmsSendWithHttpInfo (NewMessageDetails newMessageDetails);
        /// <summary>
        /// Get SMS delivery statuses
        /// </summary>
        /// <remarks>
        /// Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>MessageStatusResponse</returns>
        MessageStatusResponse SmsStatus (List<int?> messageStatusRequest);

        /// <summary>
        /// Get SMS delivery statuses
        /// </summary>
        /// <remarks>
        /// Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>ApiResponse of MessageStatusResponse</returns>
        ApiResponse<MessageStatusResponse> SmsStatusWithHttpInfo (List<int?> messageStatusRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete scheduled SMS messages and refund credits
        /// </summary>
        /// <remarks>
        /// Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of DeleteScheduledResponse</returns>
        System.Threading.Tasks.Task<DeleteScheduledResponse> DeleteScheduledMessagesAsync (List<int?> messageDeleteRequest);

        /// <summary>
        /// Delete scheduled SMS messages and refund credits
        /// </summary>
        /// <remarks>
        /// Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of ApiResponse (DeleteScheduledResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteScheduledResponse>> DeleteScheduledMessagesAsyncWithHttpInfo (List<int?> messageDeleteRequest);
        /// <summary>
        /// Get a list of incoming SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of IncomingMessageResponse</returns>
        System.Threading.Tasks.Task<IncomingMessageResponse> GetIncomingMessagesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of incoming SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (IncomingMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingMessageResponse>> GetIncomingMessagesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Get a list of incoming opt-out SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OptoutMessageResponse</returns>
        System.Threading.Tasks.Task<OptoutMessageResponse> GetOptoutMessagesAsync ();

        /// <summary>
        /// Get a list of incoming opt-out SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OptoutMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OptoutMessageResponse>> GetOptoutMessagesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a list of scheduled SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of ScheduledMessageResponse</returns>
        System.Threading.Tasks.Task<ScheduledMessageResponse> GetScheduledMessagesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// Get a list of scheduled SMS messages
        /// </summary>
        /// <remarks>
        /// Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (ScheduledMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduledMessageResponse>> GetScheduledMessagesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Send SMS messages
        /// </summary>
        /// <remarks>
        /// Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>Task of NewMessageResponse</returns>
        System.Threading.Tasks.Task<NewMessageResponse> SmsSendAsync (NewMessageDetails newMessageDetails);

        /// <summary>
        /// Send SMS messages
        /// </summary>
        /// <remarks>
        /// Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>Task of ApiResponse (NewMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewMessageResponse>> SmsSendAsyncWithHttpInfo (NewMessageDetails newMessageDetails);
        /// <summary>
        /// Get SMS delivery statuses
        /// </summary>
        /// <remarks>
        /// Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of MessageStatusResponse</returns>
        System.Threading.Tasks.Task<MessageStatusResponse> SmsStatusAsync (List<int?> messageStatusRequest);

        /// <summary>
        /// Get SMS delivery statuses
        /// </summary>
        /// <remarks>
        /// Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </remarks>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of ApiResponse (MessageStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageStatusResponse>> SmsStatusAsyncWithHttpInfo (List<int?> messageStatusRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SmsApi : ISmsApi
    {
        private winsms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SmsApi(String basePath)
        {
            this.Configuration = new winsms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = winsms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SmsApi(winsms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = winsms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = winsms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public winsms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public winsms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete scheduled SMS messages and refund credits Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>DeleteScheduledResponse</returns>
        public DeleteScheduledResponse DeleteScheduledMessages (List<int?> messageDeleteRequest)
        {
             ApiResponse<DeleteScheduledResponse> localVarResponse = DeleteScheduledMessagesWithHttpInfo(messageDeleteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete scheduled SMS messages and refund credits Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>ApiResponse of DeleteScheduledResponse</returns>
        public ApiResponse< DeleteScheduledResponse > DeleteScheduledMessagesWithHttpInfo (List<int?> messageDeleteRequest)
        {
            // verify the required parameter 'messageDeleteRequest' is set
            if (messageDeleteRequest == null)
                throw new ApiException(400, "Missing required parameter 'messageDeleteRequest' when calling SmsApi->DeleteScheduledMessages");

            var localVarPath = "/sms/scheduled/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageDeleteRequest != null && messageDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageDeleteRequest; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteScheduledResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteScheduledResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteScheduledResponse)));
        }

        /// <summary>
        /// Delete scheduled SMS messages and refund credits Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of DeleteScheduledResponse</returns>
        public async System.Threading.Tasks.Task<DeleteScheduledResponse> DeleteScheduledMessagesAsync (List<int?> messageDeleteRequest)
        {
             ApiResponse<DeleteScheduledResponse> localVarResponse = await DeleteScheduledMessagesAsyncWithHttpInfo(messageDeleteRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete scheduled SMS messages and refund credits Delete a list of previously scheduled SMS messages that have not yet been sent.  Credits originally deducted for each SMS message will be refunded to your account upon successful deletion. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageDeleteRequest">An array of WinSMS API Ids received after submitting scheduled messages to the ***_/sms/outgoing/send*** endpoint.&lt;br&gt; A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of ApiResponse (DeleteScheduledResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteScheduledResponse>> DeleteScheduledMessagesAsyncWithHttpInfo (List<int?> messageDeleteRequest)
        {
            // verify the required parameter 'messageDeleteRequest' is set
            if (messageDeleteRequest == null)
                throw new ApiException(400, "Missing required parameter 'messageDeleteRequest' when calling SmsApi->DeleteScheduledMessages");

            var localVarPath = "/sms/scheduled/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageDeleteRequest != null && messageDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageDeleteRequest; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteScheduledResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteScheduledResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteScheduledResponse)));
        }

        /// <summary>
        /// Get a list of incoming SMS messages Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>IncomingMessageResponse</returns>
        public IncomingMessageResponse GetIncomingMessages (int? offset = null, int? limit = null)
        {
             ApiResponse<IncomingMessageResponse> localVarResponse = GetIncomingMessagesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of incoming SMS messages Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>ApiResponse of IncomingMessageResponse</returns>
        public ApiResponse< IncomingMessageResponse > GetIncomingMessagesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/sms/incoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncomingMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IncomingMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IncomingMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IncomingMessageResponse)));
        }

        /// <summary>
        /// Get a list of incoming SMS messages Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of IncomingMessageResponse</returns>
        public async System.Threading.Tasks.Task<IncomingMessageResponse> GetIncomingMessagesAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<IncomingMessageResponse> localVarResponse = await GetIncomingMessagesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of incoming SMS messages Get a list of all incoming SMS messages received by the account.  Only the first 100 incoming messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (IncomingMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IncomingMessageResponse>> GetIncomingMessagesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/sms/incoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIncomingMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IncomingMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IncomingMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IncomingMessageResponse)));
        }

        /// <summary>
        /// Get a list of incoming opt-out SMS messages Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OptoutMessageResponse</returns>
        public OptoutMessageResponse GetOptoutMessages ()
        {
             ApiResponse<OptoutMessageResponse> localVarResponse = GetOptoutMessagesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of incoming opt-out SMS messages Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OptoutMessageResponse</returns>
        public ApiResponse< OptoutMessageResponse > GetOptoutMessagesWithHttpInfo ()
        {

            var localVarPath = "/sms/incoming/optout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOptoutMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OptoutMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OptoutMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OptoutMessageResponse)));
        }

        /// <summary>
        /// Get a list of incoming opt-out SMS messages Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of OptoutMessageResponse</returns>
        public async System.Threading.Tasks.Task<OptoutMessageResponse> GetOptoutMessagesAsync ()
        {
             ApiResponse<OptoutMessageResponse> localVarResponse = await GetOptoutMessagesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of incoming opt-out SMS messages Get a list of all opt-out SMS messages received by the account, as well as all manually added opt-out numbers.&lt;br&gt;
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (OptoutMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OptoutMessageResponse>> GetOptoutMessagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/sms/incoming/optout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOptoutMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OptoutMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OptoutMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OptoutMessageResponse)));
        }

        /// <summary>
        /// Get a list of scheduled SMS messages Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>ScheduledMessageResponse</returns>
        public ScheduledMessageResponse GetScheduledMessages (int? offset = null, int? limit = null)
        {
             ApiResponse<ScheduledMessageResponse> localVarResponse = GetScheduledMessagesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of scheduled SMS messages Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>ApiResponse of ScheduledMessageResponse</returns>
        public ApiResponse< ScheduledMessageResponse > GetScheduledMessagesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/sms/scheduled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledMessageResponse)));
        }

        /// <summary>
        /// Get a list of scheduled SMS messages Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of ScheduledMessageResponse</returns>
        public async System.Threading.Tasks.Task<ScheduledMessageResponse> GetScheduledMessagesAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<ScheduledMessageResponse> localVarResponse = await GetScheduledMessagesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of scheduled SMS messages Get a list of all scheduled SMS messages that have not yet been sent.  Only the first 100 scheduled messages will be returned if no ***offset*** and ***limit*** parameters are specified. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">***Optional*** - The number of items to skip before starting to return results. Default 0. Minimum 0.  (optional, default to 0)</param>
        /// <param name="limit">***Optional*** - The number of items to return. Default 100. Minimum 1. Maximum 1000.  (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (ScheduledMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduledMessageResponse>> GetScheduledMessagesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/sms/scheduled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduledMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduledMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduledMessageResponse)));
        }

        /// <summary>
        /// Send SMS messages Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>NewMessageResponse</returns>
        public NewMessageResponse SmsSend (NewMessageDetails newMessageDetails)
        {
             ApiResponse<NewMessageResponse> localVarResponse = SmsSendWithHttpInfo(newMessageDetails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send SMS messages Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>ApiResponse of NewMessageResponse</returns>
        public ApiResponse< NewMessageResponse > SmsSendWithHttpInfo (NewMessageDetails newMessageDetails)
        {
            // verify the required parameter 'newMessageDetails' is set
            if (newMessageDetails == null)
                throw new ApiException(400, "Missing required parameter 'newMessageDetails' when calling SmsApi->SmsSend");

            var localVarPath = "/sms/outgoing/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newMessageDetails != null && newMessageDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newMessageDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newMessageDetails; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NewMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewMessageResponse)));
        }

        /// <summary>
        /// Send SMS messages Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>Task of NewMessageResponse</returns>
        public async System.Threading.Tasks.Task<NewMessageResponse> SmsSendAsync (NewMessageDetails newMessageDetails)
        {
             ApiResponse<NewMessageResponse> localVarResponse = await SmsSendAsyncWithHttpInfo(newMessageDetails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send SMS messages Submit 1 or more SMS messages to be sent by WinSMS. Maximum 1000 recipients per request.  The SMS message text can be a maximum of 918 characters long. If you are submitting a message longer than 160 characters, you should change the value of ***maxSegments***. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newMessageDetails">The message, recipients and delivery options of an SMS message to be sent. </param>
        /// <returns>Task of ApiResponse (NewMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewMessageResponse>> SmsSendAsyncWithHttpInfo (NewMessageDetails newMessageDetails)
        {
            // verify the required parameter 'newMessageDetails' is set
            if (newMessageDetails == null)
                throw new ApiException(400, "Missing required parameter 'newMessageDetails' when calling SmsApi->SmsSend");

            var localVarPath = "/sms/outgoing/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newMessageDetails != null && newMessageDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newMessageDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newMessageDetails; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NewMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewMessageResponse)));
        }

        /// <summary>
        /// Get SMS delivery statuses Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>MessageStatusResponse</returns>
        public MessageStatusResponse SmsStatus (List<int?> messageStatusRequest)
        {
             ApiResponse<MessageStatusResponse> localVarResponse = SmsStatusWithHttpInfo(messageStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get SMS delivery statuses Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>ApiResponse of MessageStatusResponse</returns>
        public ApiResponse< MessageStatusResponse > SmsStatusWithHttpInfo (List<int?> messageStatusRequest)
        {
            // verify the required parameter 'messageStatusRequest' is set
            if (messageStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'messageStatusRequest' when calling SmsApi->SmsStatus");

            var localVarPath = "/sms/outgoing/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageStatusRequest != null && messageStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageStatusRequest; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStatusResponse)));
        }

        /// <summary>
        /// Get SMS delivery statuses Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of MessageStatusResponse</returns>
        public async System.Threading.Tasks.Task<MessageStatusResponse> SmsStatusAsync (List<int?> messageStatusRequest)
        {
             ApiResponse<MessageStatusResponse> localVarResponse = await SmsStatusAsyncWithHttpInfo(messageStatusRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get SMS delivery statuses Get a list of previously submitted SMS message delivery statuses.  Post an array of API Message Ids received from the ***_/sms/outgoing/send*** endpoint. 
        /// </summary>
        /// <exception cref="winsms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageStatusRequest">An array of WinSMS API Ids received after submitting messages to the ***_/sms/outgoing/send*** endpoint.  A maximum of 1000 API Ids can be supplied in a single request. </param>
        /// <returns>Task of ApiResponse (MessageStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageStatusResponse>> SmsStatusAsyncWithHttpInfo (List<int?> messageStatusRequest)
        {
            // verify the required parameter 'messageStatusRequest' is set
            if (messageStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'messageStatusRequest' when calling SmsApi->SmsStatus");

            var localVarPath = "/sms/outgoing/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageStatusRequest != null && messageStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(messageStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = messageStatusRequest; // byte array
            }

            // authentication (APIKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION")))
            {
                localVarHeaderParams["AUTHORIZATION"] = this.Configuration.GetApiKeyWithPrefix("AUTHORIZATION");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SmsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageStatusResponse)));
        }

    }
}
