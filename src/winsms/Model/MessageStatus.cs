/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = winsms.Client.SwaggerDateConverter;

namespace winsms.Model
{
    /// <summary>
    /// MessageStatus
    /// </summary>
    [DataContract]
    public partial class MessageStatus :  IEquatable<MessageStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStatus" /> class.
        /// </summary>
        /// <param name="apiMessageId">The WinSMS API Message Id identifying the SMS message..</param>
        /// <param name="mobileNumber">The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format.</param>
        /// <param name="statusDelivered">A boolean value indicating whether an SMS message was successfully delivered to the recipient&#39;s mobile number.</param>
        /// <param name="statusErrorCode">If the SMS message was successfully delivered, this value will be blank. If the ***statusDelivered*** value is false, this will contain a string indicating the current status of the SMS message. Possible values- | Value | Description | Type | |- -- -- --|- -- -- -- -- -- --|- -- -- -| | SENT| The message has been sent to the recipient, but no delivery report has been received | Temporary | | NOTFOUND | Either an incorrect MessageID was sent in the request, or the message was sent more than 90 days previously | Permanent | | INQUEUE | Message is queued for sending | Temporary | | SENDINGFAILED | The message was not transmitted, due to e.g. an invalid destination number or insufficient credits | Permanent | | FAILED | The message was sent but could not be delivered to the recipient due to e.g. no such subscriber, subscriber&#39;s phone offline | Permanent | .</param>
        /// <param name="statusTime">The date and time of the last status update for this message, in the format YYYYMMDDHHmm.  If the message was delivered (**statusDelivered &#x3D; true**) then this is a final status time. If the message is still awaiting delivery, this time might change when updates are received. .</param>
        /// <param name="creditCost">The number of credits deducted from your account for the SMS to this recipient.   If delivery to the recipient is unsuccessful, under certain conditions, this may be 0. .</param>
        public MessageStatus(int? apiMessageId = default(int?), string mobileNumber = default(string), bool? statusDelivered = default(bool?), string statusErrorCode = default(string), int? statusTime = default(int?), double? creditCost = default(double?))
        {
            this.ApiMessageId = apiMessageId;
            this.MobileNumber = mobileNumber;
            this.StatusDelivered = statusDelivered;
            this.StatusErrorCode = statusErrorCode;
            this.StatusTime = statusTime;
            this.CreditCost = creditCost;
        }
        
        /// <summary>
        /// The WinSMS API Message Id identifying the SMS message.
        /// </summary>
        /// <value>The WinSMS API Message Id identifying the SMS message.</value>
        [DataMember(Name="apiMessageId", EmitDefaultValue=false)]
        public int? ApiMessageId { get; set; }

        /// <summary>
        /// The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format
        /// </summary>
        /// <value>The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format</value>
        [DataMember(Name="mobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// A boolean value indicating whether an SMS message was successfully delivered to the recipient&#39;s mobile number
        /// </summary>
        /// <value>A boolean value indicating whether an SMS message was successfully delivered to the recipient&#39;s mobile number</value>
        [DataMember(Name="statusDelivered", EmitDefaultValue=false)]
        public bool? StatusDelivered { get; set; }

        /// <summary>
        /// If the SMS message was successfully delivered, this value will be blank. If the ***statusDelivered*** value is false, this will contain a string indicating the current status of the SMS message. Possible values- | Value | Description | Type | |- -- -- --|- -- -- -- -- -- --|- -- -- -| | SENT| The message has been sent to the recipient, but no delivery report has been received | Temporary | | NOTFOUND | Either an incorrect MessageID was sent in the request, or the message was sent more than 90 days previously | Permanent | | INQUEUE | Message is queued for sending | Temporary | | SENDINGFAILED | The message was not transmitted, due to e.g. an invalid destination number or insufficient credits | Permanent | | FAILED | The message was sent but could not be delivered to the recipient due to e.g. no such subscriber, subscriber&#39;s phone offline | Permanent | 
        /// </summary>
        /// <value>If the SMS message was successfully delivered, this value will be blank. If the ***statusDelivered*** value is false, this will contain a string indicating the current status of the SMS message. Possible values- | Value | Description | Type | |- -- -- --|- -- -- -- -- -- --|- -- -- -| | SENT| The message has been sent to the recipient, but no delivery report has been received | Temporary | | NOTFOUND | Either an incorrect MessageID was sent in the request, or the message was sent more than 90 days previously | Permanent | | INQUEUE | Message is queued for sending | Temporary | | SENDINGFAILED | The message was not transmitted, due to e.g. an invalid destination number or insufficient credits | Permanent | | FAILED | The message was sent but could not be delivered to the recipient due to e.g. no such subscriber, subscriber&#39;s phone offline | Permanent | </value>
        [DataMember(Name="statusErrorCode", EmitDefaultValue=false)]
        public string StatusErrorCode { get; set; }

        /// <summary>
        /// The date and time of the last status update for this message, in the format YYYYMMDDHHmm.  If the message was delivered (**statusDelivered &#x3D; true**) then this is a final status time. If the message is still awaiting delivery, this time might change when updates are received. 
        /// </summary>
        /// <value>The date and time of the last status update for this message, in the format YYYYMMDDHHmm.  If the message was delivered (**statusDelivered &#x3D; true**) then this is a final status time. If the message is still awaiting delivery, this time might change when updates are received. </value>
        [DataMember(Name="statusTime", EmitDefaultValue=false)]
        public int? StatusTime { get; set; }

        /// <summary>
        /// The number of credits deducted from your account for the SMS to this recipient.   If delivery to the recipient is unsuccessful, under certain conditions, this may be 0. 
        /// </summary>
        /// <value>The number of credits deducted from your account for the SMS to this recipient.   If delivery to the recipient is unsuccessful, under certain conditions, this may be 0. </value>
        [DataMember(Name="creditCost", EmitDefaultValue=false)]
        public double? CreditCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageStatus {\n");
            sb.Append("  ApiMessageId: ").Append(ApiMessageId).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  StatusDelivered: ").Append(StatusDelivered).Append("\n");
            sb.Append("  StatusErrorCode: ").Append(StatusErrorCode).Append("\n");
            sb.Append("  StatusTime: ").Append(StatusTime).Append("\n");
            sb.Append("  CreditCost: ").Append(CreditCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageStatus);
        }

        /// <summary>
        /// Returns true if MessageStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiMessageId == input.ApiMessageId ||
                    (this.ApiMessageId != null &&
                    this.ApiMessageId.Equals(input.ApiMessageId))
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.StatusDelivered == input.StatusDelivered ||
                    (this.StatusDelivered != null &&
                    this.StatusDelivered.Equals(input.StatusDelivered))
                ) && 
                (
                    this.StatusErrorCode == input.StatusErrorCode ||
                    (this.StatusErrorCode != null &&
                    this.StatusErrorCode.Equals(input.StatusErrorCode))
                ) && 
                (
                    this.StatusTime == input.StatusTime ||
                    (this.StatusTime != null &&
                    this.StatusTime.Equals(input.StatusTime))
                ) && 
                (
                    this.CreditCost == input.CreditCost ||
                    (this.CreditCost != null &&
                    this.CreditCost.Equals(input.CreditCost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiMessageId != null)
                    hashCode = hashCode * 59 + this.ApiMessageId.GetHashCode();
                if (this.MobileNumber != null)
                    hashCode = hashCode * 59 + this.MobileNumber.GetHashCode();
                if (this.StatusDelivered != null)
                    hashCode = hashCode * 59 + this.StatusDelivered.GetHashCode();
                if (this.StatusErrorCode != null)
                    hashCode = hashCode * 59 + this.StatusErrorCode.GetHashCode();
                if (this.StatusTime != null)
                    hashCode = hashCode * 59 + this.StatusTime.GetHashCode();
                if (this.CreditCost != null)
                    hashCode = hashCode * 59 + this.CreditCost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
