/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = winsms.Client.SwaggerDateConverter;

namespace winsms.Model
{
    /// <summary>
    /// SubAccount
    /// </summary>
    [DataContract]
    public partial class SubAccount :  IEquatable<SubAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubAccount" /> class.
        /// </summary>
        /// <param name="accountNumber">The WinSMS account number of the Sub Account. This is supplied as an integer, without the leading &#39;W&#39; displayed in the WinSMS Client Zone. .</param>
        /// <param name="loginName">The login name of the user that the Sub Account is registered to. .</param>
        /// <param name="firstName">The first name of the user that the Sub Account is registered to. .</param>
        /// <param name="surname">The surname of the user that the Sub Account is registered to. .</param>
        /// <param name="creditBalance">The remaining credit balance for the Sub Account. .</param>
        public SubAccount(int? accountNumber = default(int?), string loginName = default(string), string firstName = default(string), string surname = default(string), decimal? creditBalance = default(decimal?))
        {
            this.AccountNumber = accountNumber;
            this.LoginName = loginName;
            this.FirstName = firstName;
            this.Surname = surname;
            this.CreditBalance = creditBalance;
        }
        
        /// <summary>
        /// The WinSMS account number of the Sub Account. This is supplied as an integer, without the leading &#39;W&#39; displayed in the WinSMS Client Zone. 
        /// </summary>
        /// <value>The WinSMS account number of the Sub Account. This is supplied as an integer, without the leading &#39;W&#39; displayed in the WinSMS Client Zone. </value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public int? AccountNumber { get; set; }

        /// <summary>
        /// The login name of the user that the Sub Account is registered to. 
        /// </summary>
        /// <value>The login name of the user that the Sub Account is registered to. </value>
        [DataMember(Name="loginName", EmitDefaultValue=false)]
        public string LoginName { get; set; }

        /// <summary>
        /// The first name of the user that the Sub Account is registered to. 
        /// </summary>
        /// <value>The first name of the user that the Sub Account is registered to. </value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The surname of the user that the Sub Account is registered to. 
        /// </summary>
        /// <value>The surname of the user that the Sub Account is registered to. </value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// The remaining credit balance for the Sub Account. 
        /// </summary>
        /// <value>The remaining credit balance for the Sub Account. </value>
        [DataMember(Name="creditBalance", EmitDefaultValue=false)]
        public decimal? CreditBalance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubAccount {\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  CreditBalance: ").Append(CreditBalance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubAccount);
        }

        /// <summary>
        /// Returns true if SubAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of SubAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.CreditBalance == input.CreditBalance ||
                    (this.CreditBalance != null &&
                    this.CreditBalance.Equals(input.CreditBalance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.CreditBalance != null)
                    hashCode = hashCode * 59 + this.CreditBalance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
