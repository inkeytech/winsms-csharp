/* 
 * WINSMS
 *
 * WinSMS RESTful API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@winsms.co.za
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = winsms.Client.SwaggerDateConverter;

namespace winsms.Model
{
    /// <summary>
    /// DeletedMessageStatus
    /// </summary>
    [DataContract]
    public partial class DeletedMessageStatus :  IEquatable<DeletedMessageStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeletedMessageStatus" /> class.
        /// </summary>
        /// <param name="apiMessageId">The WinSMS API Message Id identifying the SMS message. .</param>
        /// <param name="mobileNumber">The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format .</param>
        /// <param name="deleted">A boolean value indicating whether a scheduled SMS message was successfully deleted .</param>
        /// <param name="deleteError">If the ***deleted*** value is false, this will contain an error code indicating the reason for the failure. If the scheduled SMS message was successfully deleted, this value will be blank. .</param>
        /// <param name="creditCost">The number of credits refunded to your account after deleting the scheduled message.  If the deletion was unsuccessful, this value will be 0. .</param>
        public DeletedMessageStatus(int? apiMessageId = default(int?), string mobileNumber = default(string), bool? deleted = default(bool?), string deleteError = default(string), double? creditCost = default(double?))
        {
            this.ApiMessageId = apiMessageId;
            this.MobileNumber = mobileNumber;
            this.Deleted = deleted;
            this.DeleteError = deleteError;
            this.CreditCost = creditCost;
        }
        
        /// <summary>
        /// The WinSMS API Message Id identifying the SMS message. 
        /// </summary>
        /// <value>The WinSMS API Message Id identifying the SMS message. </value>
        [DataMember(Name="apiMessageId", EmitDefaultValue=false)]
        public int? ApiMessageId { get; set; }

        /// <summary>
        /// The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format 
        /// </summary>
        /// <value>The mobile number of the recipient of the SMS message, using the international E164 (without the plus) format </value>
        [DataMember(Name="mobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// A boolean value indicating whether a scheduled SMS message was successfully deleted 
        /// </summary>
        /// <value>A boolean value indicating whether a scheduled SMS message was successfully deleted </value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// If the ***deleted*** value is false, this will contain an error code indicating the reason for the failure. If the scheduled SMS message was successfully deleted, this value will be blank. 
        /// </summary>
        /// <value>If the ***deleted*** value is false, this will contain an error code indicating the reason for the failure. If the scheduled SMS message was successfully deleted, this value will be blank. </value>
        [DataMember(Name="deleteError", EmitDefaultValue=false)]
        public string DeleteError { get; set; }

        /// <summary>
        /// The number of credits refunded to your account after deleting the scheduled message.  If the deletion was unsuccessful, this value will be 0. 
        /// </summary>
        /// <value>The number of credits refunded to your account after deleting the scheduled message.  If the deletion was unsuccessful, this value will be 0. </value>
        [DataMember(Name="creditCost", EmitDefaultValue=false)]
        public double? CreditCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeletedMessageStatus {\n");
            sb.Append("  ApiMessageId: ").Append(ApiMessageId).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DeleteError: ").Append(DeleteError).Append("\n");
            sb.Append("  CreditCost: ").Append(CreditCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeletedMessageStatus);
        }

        /// <summary>
        /// Returns true if DeletedMessageStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of DeletedMessageStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeletedMessageStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiMessageId == input.ApiMessageId ||
                    (this.ApiMessageId != null &&
                    this.ApiMessageId.Equals(input.ApiMessageId))
                ) && 
                (
                    this.MobileNumber == input.MobileNumber ||
                    (this.MobileNumber != null &&
                    this.MobileNumber.Equals(input.MobileNumber))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.DeleteError == input.DeleteError ||
                    (this.DeleteError != null &&
                    this.DeleteError.Equals(input.DeleteError))
                ) && 
                (
                    this.CreditCost == input.CreditCost ||
                    (this.CreditCost != null &&
                    this.CreditCost.Equals(input.CreditCost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiMessageId != null)
                    hashCode = hashCode * 59 + this.ApiMessageId.GetHashCode();
                if (this.MobileNumber != null)
                    hashCode = hashCode * 59 + this.MobileNumber.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.DeleteError != null)
                    hashCode = hashCode * 59 + this.DeleteError.GetHashCode();
                if (this.CreditCost != null)
                    hashCode = hashCode * 59 + this.CreditCost.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
